# coding: utf-8

"""
    rag_document_extractor

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_server.models.information_type import InformationType
from openapi_server.models.meta_information_piece import MetaInformationPiece

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class InformationPiece(BaseModel):
    """
    A piece of information that has been extracted.
    """  # noqa: E501

    content: StrictStr = Field(alias="Content")
    type: InformationType = Field(alias="Type")
    meta_information: List[MetaInformationPiece] = Field(alias="MetaInformation")
    __properties: ClassVar[List[str]] = ["Content", "Type", "MetaInformation"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InformationPiece from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in meta_information (list)
        _items = []
        if self.meta_information:
            for _item in self.meta_information:
                if _item:
                    _items.append(_item.to_dict())
            _dict["MetaInformation"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InformationPiece from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "Content": obj.get("Content"),
                "Type": obj.get("Type"),
                "MetaInformation": (
                    [MetaInformationPiece.from_dict(_item) for _item in obj.get("MetaInformation")]
                    if obj.get("MetaInformation") is not None
                    else None
                ),
            }
        )
        return _obj
