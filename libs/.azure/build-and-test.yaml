pr:
  - develop
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
- name: DOCKER_IMAGE_NAME
  value: rag_core_lib:$(Build.SourceBranchName)-$(Build.BuildId)

stages:
- stage: BuildAndTest
  jobs:
  - job: Build
    steps:
    - script: |
        docker build -t $DOCKER_IMAGE_NAME -f Dockerfile .
      displayName: "Building docker image."
    # Note that the pyproject.toml is already copied into the docker image. Also note that copy
    # pasting the whole /app folder will overwrite the existing .venv folder in the docker image
    - script: |
        docker run --rm  -v $(pwd)/flake8_dashboard:/app/flake8_dashboard $DOCKER_IMAGE_NAME make lint
        LINTING_EXIT_CODE=$(echo $?)
        echo "LINTING_EXIT_CODE is equal to '${LINTING_EXIT_CODE}'."
        echo "##vso[task.setvariable variable=LINTING_EXIT_CODE]$LINTING_EXIT_CODE"
      displayName: "Generating lint report."
    - script: |
        zip -r $(Build.ArtifactStagingDirectory)/flake8_lint_dashboard.zip flake8_dashboard
      displayName: "Zipping lint report"
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: "$(Build.ArtifactStagingDirectory)/flake8_lint_dashboard.zip"
        ArtifactName: "linting_report"
        publishLocation: "Container"
      displayName: "Publishing lint report"
    - script: |
        echo "LINTING_EXIT_CODE is equal to '${LINTING_EXIT_CODE}'."
        if [ $LINTING_EXIT_CODE -eq 0 ]; then
          echo "Linting successful ==> continuing pipeline ..."
        else
            echo "Linting failed ==> aborting pipeline ..."
          exit $LINTING_EXIT_CODE
        fi
      displayName: "Linting successful check"

    - script: |
        docker run --rm -v $(pwd)/htmlcov:/app/htmlcov $DOCKER_IMAGE_NAME make coverage
      displayName: "Running unit tests with test coverage"
    - script: |
        zip -r $(Build.ArtifactStagingDirectory)/test_coverage.zip htmlcov
      displayName: "Zipping coverage report"
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: "$(Build.ArtifactStagingDirectory)/test_coverage.zip"
        ArtifactName: "test_coverage_report"
        publishLocation: "Container"
      displayName: "Publishing test coverage report"
