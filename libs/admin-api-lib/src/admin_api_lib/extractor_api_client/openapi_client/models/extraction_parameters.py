# coding: utf-8

"""
extractor-api-lib

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from admin_api_lib.extractor_api_client.openapi_client.models.key_value_pair import KeyValuePair
from typing import Optional, Set
from typing_extensions import Self


class ExtractionParameters(BaseModel):
    """ """  # noqa: E501

    document_name: StrictStr = Field(
        description="The name that will be used to store the confluence db in the key value db and the vectordatabase (metadata.document)."
    )
    kwargs: Optional[List[KeyValuePair]] = Field(default=None, description="Kwargs for the extractor")
    source_type: StrictStr = Field(description="Extractortype")
    __properties: ClassVar[List[str]] = ["document_name", "kwargs", "source_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtractionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in kwargs (list)
        _items = []
        if self.kwargs:
            for _item_kwargs in self.kwargs:
                if _item_kwargs:
                    _items.append(_item_kwargs.to_dict())
            _dict["kwargs"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtractionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "document_name": obj.get("document_name"),
                "kwargs": (
                    [KeyValuePair.from_dict(_item) for _item in obj["kwargs"]]
                    if obj.get("kwargs") is not None
                    else None
                ),
                "source_type": obj.get("source_type"),
            }
        )
        return _obj
