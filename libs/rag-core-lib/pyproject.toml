[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "rag-core-lib"
version = "0.0.1"
description = "The perfect rag template"
authors = []
readme = "README.md"
license = ""
packages = [{ include = "rag_core_lib", from = "src" }]

[tool.poetry.dependencies]
python = "^3.11"
langchain = "^0.2.1"
langchain-community = "0.2.4"
flashrank = "^0.2.5"
pydantic-settings = "^2.2.1"
pydantic = "^2.7.2"
oauthlib = "^3.2.2"
requests-oauthlib = "^2.0.0"
langfuse = "^2.33.0"
aleph-alpha-client = "^7.1.0"
deprecated = "^1.2.14"

[tool.poetry.group.dev.dependencies]
debugpy = "^1.8.1"
pytest = "^8.2.1"
flake8 = "^7.1.0"
flake8-black = "^0.3.6"
flake8-pyproject = "^1.2.3"
coverage = "^7.5.4"
flake8-quotes = "^3.4.0"
flake8-return = "^1.2.0"
flake8-annotations-complexity = "^0.0.8"
flake8-bandit = "^4.1.1"
flake8-bugbear = "^24.8.19"
flake8-builtins = "^2.5.0"
flake8-comprehensions = "^3.15.0"
flake8-eradicate = "^1.5.0"
flake8-expression-complexity = "^0.0.11"
# flake8-logging-format = "^2024.24.12"
# flake8-docstrings = "^1.7.0"
flake8-pytest-style = "^2.0.0"
pep8-naming = "^0.14.1"
flake8-eol = "^0.0.8"
flake8-exceptions = "^0.0.1a0"
flake8-simplify = "^0.21.0"
flake8-wot = "^0.2.0"
flake8-function-order = "^0.0.5"
flake8-tidy-imports = "^4.10.0"

[tool.flake8]
exclude= [".eggs", ".git", ".hg", ".mypy_cache", ".tox", ".venv", ".devcontainer", "venv", "_build", "buck-out", "build", "dist"]
statistics = true
show-source = false
max-complexity = 8
max-annotations-complexity = 3
docstring-convention = 'numpy'
max-line-length = 120
ignore = ["E203", "W503", "E704"]
inline-quotes = '"'
docstring-quotes = '"""'
multiline-quotes = '"""'
dictionaries = ["en_US", "python", "technical", "pandas"]
ban-relative-imports = true
per-file-ignores = """./src/rag_core/impl/prompt_templates/answer_generation_prompt.py: E501,./tests/*: S101"""

[tool.black]
line-length = 120
exclude = """
/(
     .eggs
    | .git
    | .hg
    | .mypy_cache
    | .nox
    | .pants.d
    | .tox
    | .venv
    | _build
    | buck-out
    | build
    | dist
    | node_modules
    | venv
)/
"""

[tool.isort]
profile = "black"
skip = ['.eggs', '.git', '.hg', '.mypy_cache', '.nox', '.pants.d', '.tox', '.venv', '_build', 'buck-out', 'build', 'dist', 'node_modules', 'venv']
skip_gitignore = true

[tool.pylint]
max-line-length = 120

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg", ".ipynb_checkpoints", ".mypy_cache", ".nox", ".pants.d", ".pyenv", ".pytest_cache", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv", ".vscode", "__pypackages__", "_build", "buck-out", "build", "dist", "node_modules", "site-packages", "venv"]

# Same as Black.
"line-length" = 120
"indent-width" = 4
"unsafe-fixes" = true
# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["F"]
ignore = ["S101", "ERA001", "COM812", "ISC001", "D213", "D211", "TD002", "TD003", "FIX002", "D401", "ANN101", "S105", "ANN002", "ANN003", "INP001", "S104", "S108", "FBT001", "FBT002", "PLW0603", "S106", "PLR2004", "B008", "RET505"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
log_cli = 1
log_cli_level = "DEBUG"
